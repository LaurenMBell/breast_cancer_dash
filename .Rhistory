swirl()
library("swirl")
swirl()
Sys.date()
Sys.Date()
mean(c(3,4,5))
mean(c(2,4,5))
submit()
submit()
boring_function("My first function!")
noring_function
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){c[1]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hey", "Desmond", "I love you", "very", "much", "!!!")
submit()
submit()
mad_libs(place = "Diddy Party", adjective = "freaky", noun = "baby oil")
submit()
submit
submit()
I%p%love%p%R
"I"%p%"love"%p%"R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(cls_list, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flas_shapes <- flags[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_colors, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
apply(unique_vals, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sampel(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replacement = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips, 1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1 prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
rpoir(5)
rpois(5)
?rpois
rpois(5, lambda = 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time -> t1
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXLt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
classs(t2)
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$sdist, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(x = Speed, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlabel = "Speed")
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
mtcars
data(mtcards)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
rm(list = ls())
install.packages("tidyverse:)
install.packages("tidyverse")
install.packages("tidyverse")
library("swirl")
swirl()
swirl()
library("swirl")
install_course("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galot)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~parent, galton)
abline(regr, lwd=3, col = "red")
abline(regrline, lwd=3, col = "red")
library("swirl")
ls
rm(list=ls())
swirl()
summary(regrline)
scan?
scan()?
help()
? scan
data1 = scan()
data1 = scan(what = "character")
data1
del(data1)
delete(data1)
data2 = scan(what = "character", sep = ",")
data2
library(biomaRt)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
shiny::runApp('Desktop/Denmark-Dashboard')
runApp('Desktop/Denmark-Dashboard')
runApp(census-App)
runApp(census-app)
setwd(~/Desktop)
shiny::runApp('Desktop/msm-pms-shiny/app')
shiny::runApp('Desktop/msm-pms-shiny/app')
runApp('Desktop/msm-pms-shiny/app')
runApp('Desktop/msm-pms-shiny/app')
shiny::runApp('Desktop/msm-pms-shiny/app')
setwd("~/Desktop/heatmap_shiny")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
reticulate::py_last_error()
runApp()
reticulate::py_last_error()
runApp()
runApp()
reticulate::py_last_error()
shiny::runApp()
reticulate::py_last_error()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('Desktop/interactive_heatmap')
runApp('Desktop/interactive_heatmap')
runApp('Desktop/interactive_heatmap')
runApp('Desktop/interactive_heatmap')
runApp('Desktop/interactive_heatmap')
a = 72; b = 7; ### define the distribution parameters
r = seq(0,1,0.01) ### create a list of values to plug into the function below
pdf = function(x) {a*x^b*(1-x)} # Creates the pdf function
plot(r, pdf(r), type='l', xlab = "y",main = "Continuous VAR",ylab = "f(y)", lwd = 2)
shiny::runApp('Desktop/breast_cancer_dash')
